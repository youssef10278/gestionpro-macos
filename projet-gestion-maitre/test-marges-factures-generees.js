// test-marges-factures-generees.js - Test des marges dans les factures g√©n√©r√©es

console.log('üìÑ === TEST MARGES FACTURES G√âN√âR√âES ===');

/**
 * Test complet des marges dans les factures g√©n√©r√©es
 */
async function testInvoiceMarginsGeneration() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DE L\'ENVIRONNEMENT');
        
        // V√©rifier qu'on est sur la page des factures
        if (!window.location.href.includes('invoices.html')) {
            console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page des factures');
            return;
        }
        
        console.log('‚úÖ Page des factures d√©tect√©e');
        
        console.log('\n2Ô∏è‚É£ V√âRIFICATION DU TEMPLATE ACTUEL');
        
        // V√©rifier la fonction de r√©cup√©ration des styles
        if (typeof getCurrentTemplateStyles !== 'function') {
            console.error('‚ùå Fonction getCurrentTemplateStyles non disponible');
            return;
        }
        
        console.log('‚úÖ Fonction getCurrentTemplateStyles disponible');
        
        // R√©cup√©rer les styles du template actuel
        console.log('üé® R√©cup√©ration des styles du template...');
        const templateStyles = await getCurrentTemplateStyles();
        
        console.log('üìä Styles r√©cup√©r√©s:');
        console.log(`   - Longueur: ${templateStyles.length} caract√®res`);
        
        // Analyser les marges dans le CSS
        const marginRegex = /padding:\s*([^;]+);/g;
        const pageMarginRegex = /@page\s*\{[^}]*margin:\s*([^;]+);/g;
        
        let paddingMatches = [];
        let pageMarginMatches = [];
        let match;
        
        // Chercher les paddings
        while ((match = marginRegex.exec(templateStyles)) !== null) {
            paddingMatches.push(match[1]);
        }
        
        // Chercher les marges @page
        while ((match = pageMarginRegex.exec(templateStyles)) !== null) {
            pageMarginMatches.push(match[1]);
        }
        
        console.log('üìè Marges trouv√©es dans le CSS:');
        console.log(`   - Paddings: ${paddingMatches.length} trouv√©(s)`);
        paddingMatches.forEach((padding, index) => {
            console.log(`     ${index + 1}. ${padding}`);
        });
        
        console.log(`   - Marges @page: ${pageMarginMatches.length} trouv√©(s)`);
        pageMarginMatches.forEach((margin, index) => {
            console.log(`     ${index + 1}. ${margin}`);
        });
        
        console.log('\n3Ô∏è‚É£ TEST DE G√âN√âRATION CSS AVEC MARGES PERSONNALIS√âES');
        
        // Tester la fonction generateTemplateCSS directement si disponible
        if (typeof generateTemplateCSS === 'function') {
            console.log('üß™ Test de g√©n√©ration CSS avec marges personnalis√©es...');
            
            const testColors = { primary: '#2c5aa0', secondary: '#f97316', header_gradient_start: '#2c5aa0', header_gradient_end: '#1e40af' };
            const testFonts = { primary_font: 'Arial, sans-serif', title_size: '24px', body_size: '14px' };
            const testLayout = {
                header_height: '80px',
                section_spacing: '25px',
                page_margins: {
                    top: '30mm',
                    right: '25mm',
                    bottom: '30mm',
                    left: '25mm'
                }
            };
            const testElements = { show_logo: true, show_line_numbers: true };
            
            const customCSS = generateTemplateCSS(testColors, testFonts, testLayout, testElements);
            
            console.log('‚úÖ CSS personnalis√© g√©n√©r√©');
            console.log(`üìè Longueur: ${customCSS.length} caract√®res`);
            
            // V√©rifier que les marges personnalis√©es sont pr√©sentes
            const hasCustomPadding = customCSS.includes('padding: 30mm 25mm 30mm 25mm');
            const hasCustomPageMargin = customCSS.includes('margin: 30mm 25mm 30mm 25mm');
            
            console.log('üîç V√©rification des marges personnalis√©es:');
            console.log(`   - Padding personnalis√©: ${hasCustomPadding ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Marge @page personnalis√©e: ${hasCustomPageMargin ? '‚úÖ' : '‚ùå'}`);
            
            if (hasCustomPadding || hasCustomPageMargin) {
                console.log('‚úÖ Les marges personnalis√©es sont correctement appliqu√©es');
            } else {
                console.warn('‚ö†Ô∏è Les marges personnalis√©es ne semblent pas √™tre appliqu√©es');
            }
            
        } else {
            console.warn('‚ö†Ô∏è Fonction generateTemplateCSS non accessible pour le test direct');
        }
        
        console.log('\n4Ô∏è‚É£ TEST AVEC TEMPLATE R√âEL');
        
        // Tester avec un template r√©el s'il y en a un de charg√©
        try {
            const templateManager = window.templateManager;
            if (templateManager && templateManager.getCurrentTemplate) {
                const currentTemplate = await templateManager.getCurrentTemplate();
                
                if (currentTemplate) {
                    console.log('üìã Template actuel:', currentTemplate.display_name);
                    
                    // Parser la configuration
                    let layoutConfig = {};
                    try {
                        if (typeof currentTemplate.layout_config === 'string') {
                            layoutConfig = JSON.parse(currentTemplate.layout_config);
                        } else {
                            layoutConfig = currentTemplate.layout_config || {};
                        }
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Erreur parsing layout_config:', e);
                    }
                    
                    console.log('üìä Configuration du layout:');
                    console.log('   - Layout config:', layoutConfig);
                    console.log('   - Page margins:', layoutConfig.page_margins);
                    
                    if (layoutConfig.page_margins) {
                        const margins = layoutConfig.page_margins;
                        console.log('üìè Marges du template:');
                        console.log(`   - Haut: ${margins.top || 'non d√©fini'}`);
                        console.log(`   - Droite: ${margins.right || 'non d√©fini'}`);
                        console.log(`   - Bas: ${margins.bottom || 'non d√©fini'}`);
                        console.log(`   - Gauche: ${margins.left || 'non d√©fini'}`);
                    } else {
                        console.log('üìè Aucune marge personnalis√©e d√©finie dans le template');
                    }
                } else {
                    console.log('üìã Aucun template actuellement s√©lectionn√©');
                }
            } else {
                console.warn('‚ö†Ô∏è TemplateManager non disponible');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration du template:', error);
        }
        
        console.log('\n5Ô∏è‚É£ TEST D\'APER√áU AVEC MARGES');
        
        // Cr√©er un aper√ßu de test pour v√©rifier les marges
        console.log('üñºÔ∏è Cr√©ation d\'un aper√ßu de test...');
        
        const testHTML = `
            <div class="invoice-container" style="border: 2px dashed #ccc; background: #f9f9f9;">
                <div style="background: white; padding: 20px; margin: 10px 0;">
                    <h1>FACTURE TEST</h1>
                    <p>Cette zone repr√©sente le contenu de la facture.</p>
                    <p>Les marges grises autour montrent l'espace des marges.</p>
                    <div style="border: 1px solid #ddd; padding: 10px; margin: 10px 0;">
                        <strong>Zone de contenu principal</strong>
                    </div>
                </div>
            </div>
        `;
        
        // Cr√©er un conteneur de test
        let testContainer = document.getElementById('marginTestContainer');
        if (!testContainer) {
            testContainer = document.createElement('div');
            testContainer.id = 'marginTestContainer';
            testContainer.style.cssText = `
                position: fixed;
                top: 50px;
                right: 50px;
                width: 300px;
                height: 400px;
                background: white;
                border: 2px solid #333;
                z-index: 10000;
                overflow: auto;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            `;
            document.body.appendChild(testContainer);
        }
        
        // Ajouter le CSS actuel et le HTML de test
        testContainer.innerHTML = `
            <style>${templateStyles}</style>
            <div style="transform: scale(0.3); transform-origin: top left; width: 333%;">
                ${testHTML}
            </div>
            <div style="position: absolute; top: 5px; right: 5px;">
                <button onclick="document.getElementById('marginTestContainer').remove()" 
                        style="background: red; color: white; border: none; padding: 5px;">‚úï</button>
            </div>
        `;
        
        console.log('‚úÖ Aper√ßu de test cr√©√© (coin sup√©rieur droit)');
        console.log('üëÅÔ∏è V√©rifiez visuellement les marges dans l\'aper√ßu');
        
        console.log('\n6Ô∏è‚É£ INSTRUCTIONS POUR TEST MANUEL');
        
        console.log('üìã Pour tester compl√®tement les marges:');
        console.log('1. Allez dans Personnalisation des Factures');
        console.log('2. Modifiez les marges (ex: 30mm partout)');
        console.log('3. Sauvegardez le template');
        console.log('4. Revenez sur cette page et relancez ce test');
        console.log('5. Cr√©ez/imprimez une facture pour voir le r√©sultat final');
        
        console.log('\nüéØ R√âSULTAT FINAL');
        console.log('‚úÖ Test des marges termin√©');
        console.log('üìã V√©rifiez les r√©sultats ci-dessus et l\'aper√ßu visuel');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

/**
 * Test rapide des marges
 */
async function testQuickInvoiceMargins() {
    console.log('\nüöÄ === TEST RAPIDE MARGES ===');
    
    try {
        if (typeof getCurrentTemplateStyles === 'function') {
            const styles = await getCurrentTemplateStyles();
            
            // Chercher les marges dans le CSS
            const paddingMatch = styles.match(/\.invoice-container[^}]*padding:\s*([^;]+);/);
            const pageMarginMatch = styles.match(/@page[^}]*margin:\s*([^;]+);/);
            
            console.log('üìè Marges d√©tect√©es:');
            console.log(`   - Container padding: ${paddingMatch ? paddingMatch[1] : 'Non trouv√©'}`);
            console.log(`   - Page margin: ${pageMarginMatch ? pageMarginMatch[1] : 'Non trouv√©'}`);
            
            if (paddingMatch || pageMarginMatch) {
                console.log('‚úÖ Marges personnalis√©es d√©tect√©es');
            } else {
                console.log('‚ö†Ô∏è Marges par d√©faut utilis√©es');
            }
        } else {
            console.error('‚ùå Fonction getCurrentTemplateStyles non disponible');
        }
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

/**
 * Afficher les marges du template actuel
 */
async function showCurrentTemplateMargins() {
    console.log('\nüìä === MARGES DU TEMPLATE ACTUEL ===');
    
    try {
        const templateManager = window.templateManager;
        if (templateManager && templateManager.getCurrentTemplate) {
            const template = await templateManager.getCurrentTemplate();
            
            if (template) {
                console.log(`üìã Template: ${template.display_name}`);
                
                let layoutConfig = {};
                try {
                    if (typeof template.layout_config === 'string') {
                        layoutConfig = JSON.parse(template.layout_config);
                    } else {
                        layoutConfig = template.layout_config || {};
                    }
                } catch (e) {
                    console.error('‚ùå Erreur parsing layout_config:', e);
                    return;
                }
                
                const margins = layoutConfig.page_margins;
                if (margins) {
                    console.log('üìè Marges configur√©es:');
                    console.log(`   üîù Haut: ${margins.top}`);
                    console.log(`   ‚û°Ô∏è Droite: ${margins.right}`);
                    console.log(`   üîΩ Bas: ${margins.bottom}`);
                    console.log(`   ‚¨ÖÔ∏è Gauche: ${margins.left}`);
                } else {
                    console.log('üìè Aucune marge personnalis√©e (utilise les valeurs par d√©faut)');
                }
            } else {
                console.log('‚ùå Aucun template s√©lectionn√©');
            }
        } else {
            console.error('‚ùå TemplateManager non disponible');
        }
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

// Exporter les fonctions
window.testInvoiceMarginsGeneration = testInvoiceMarginsGeneration;
window.testQuickInvoiceMargins = testQuickInvoiceMargins;
window.showCurrentTemplateMargins = showCurrentTemplateMargins;

console.log('üõ†Ô∏è Fonctions de test disponibles:');
console.log('- testInvoiceMarginsGeneration() : Test complet des marges dans les factures');
console.log('- testQuickInvoiceMargins() : Test rapide des marges');
console.log('- showCurrentTemplateMargins() : Afficher les marges du template actuel');
console.log('\nüí° Commencez par: testInvoiceMarginsGeneration()');
