#!/usr/bin/env node

/**
 * Script de configuration pour le build macOS
 * G√®re les d√©pendances natives et la pr√©paration du build
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üçé Configuration du build macOS...');
console.log('');

// Fonction utilitaire pour ex√©cuter des commandes
function runCommand(command, description, optional = false) {
    try {
        console.log(`üîÑ ${description}...`);
        execSync(command, { stdio: 'inherit' });
        console.log(`‚úÖ ${description} - OK`);
        return true;
    } catch (error) {
        if (optional) {
            console.log(`‚ö†Ô∏è  ${description} - Ignor√© (optionnel)`);
            return false;
        } else {
            console.error(`‚ùå ${description} - ERREUR`);
            console.error(error.message);
            throw error;
        }
    }
}

// V√©rifier l'environnement macOS
function checkMacOSEnvironment() {
    console.log('üîç V√©rification de l\'environnement macOS...');
    
    if (process.platform !== 'darwin') {
        console.log('‚ö†Ô∏è  Ce script est optimis√© pour macOS');
        console.log('üí° Continuons quand m√™me pour la compatibilit√© CI/CD');
    }
    
    // V√©rifier Node.js
    try {
        const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
        console.log(`‚úÖ Node.js: ${nodeVersion}`);
    } catch (error) {
        throw new Error('Node.js n\'est pas install√©');
    }
    
    // V√©rifier npm
    try {
        const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
        console.log(`‚úÖ npm: ${npmVersion}`);
    } catch (error) {
        throw new Error('npm n\'est pas disponible');
    }
    
    // V√©rifier Python (n√©cessaire pour les modules natifs)
    try {
        const pythonVersion = execSync('python3 --version', { encoding: 'utf8' }).trim();
        console.log(`‚úÖ Python: ${pythonVersion}`);
    } catch (error) {
        console.log('‚ö†Ô∏è  Python3 non trouv√© - peut causer des probl√®mes avec les modules natifs');
    }
    
    console.log('');
}

// Installer les d√©pendances syst√®me macOS
function installSystemDependencies() {
    if (process.platform !== 'darwin') {
        console.log('‚è≠Ô∏è  D√©pendances syst√®me ignor√©es (pas sur macOS)');
        return;
    }
    
    console.log('üì¶ Installation des d√©pendances syst√®me macOS...');
    
    // V√©rifier si Homebrew est install√©
    try {
        execSync('which brew', { stdio: 'pipe' });
        console.log('‚úÖ Homebrew d√©tect√©');
        
        // Installer les d√©pendances n√©cessaires pour les modules natifs
        const brewPackages = [
            'pkg-config',
            'cairo',
            'pango',
            'libpng',
            'jpeg',
            'giflib',
            'librsvg'
        ];
        
        for (const pkg of brewPackages) {
            try {
                execSync(`brew list ${pkg}`, { stdio: 'pipe' });
                console.log(`‚úÖ ${pkg} d√©j√† install√©`);
            } catch {
                runCommand(`brew install ${pkg}`, `Installation de ${pkg}`, true);
            }
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è  Homebrew non trouv√© - installation manuelle des d√©pendances requise');
        console.log('üí° Installez Homebrew: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"');
    }
    
    console.log('');
}

// Configurer les modules natifs
function setupNativeModules() {
    console.log('üîß Configuration des modules natifs...');
    
    // Variables d'environnement pour la compilation
    const buildEnv = {
        ...process.env,
        npm_config_build_from_source: 'true',
        npm_config_cache_lock_stale: '60000',
        npm_config_node_gyp: path.join(process.cwd(), 'node_modules', '.bin', 'node-gyp')
    };
    
    // Nettoyer le cache npm
    runCommand('npm cache clean --force', 'Nettoyage du cache npm', true);
    
    // Installer/mettre √† jour node-gyp
    runCommand('npm install -g node-gyp', 'Installation de node-gyp', true);
    
    // Reconstruire better-sqlite3 sp√©cifiquement
    try {
        console.log('üîÑ Reconstruction de better-sqlite3 pour macOS...');
        execSync('npm rebuild better-sqlite3', { 
            stdio: 'inherit',
            env: buildEnv
        });
        console.log('‚úÖ better-sqlite3 reconstruit avec succ√®s');
    } catch (error) {
        console.log('‚ö†Ô∏è  Erreur lors de la reconstruction de better-sqlite3');
        console.log('üîÑ Tentative de r√©installation...');
        
        try {
            execSync('npm uninstall better-sqlite3', { stdio: 'inherit' });
            execSync('npm install better-sqlite3', { 
                stdio: 'inherit',
                env: buildEnv
            });
            console.log('‚úÖ better-sqlite3 r√©install√© avec succ√®s');
        } catch (reinstallError) {
            console.error('‚ùå Impossible de configurer better-sqlite3');
            throw reinstallError;
        }
    }
    
    // Reconstruire bcrypt
    try {
        console.log('üîÑ Reconstruction de bcrypt pour macOS...');
        execSync('npm rebuild bcrypt', { 
            stdio: 'inherit',
            env: buildEnv
        });
        console.log('‚úÖ bcrypt reconstruit avec succ√®s');
    } catch (error) {
        console.log('‚ö†Ô∏è  Erreur lors de la reconstruction de bcrypt - continuons');
    }
    
    // Reconstruction g√©n√©rale avec electron-rebuild
    runCommand('npx electron-rebuild', 'Reconstruction g√©n√©rale des modules natifs');
    
    console.log('');
}

// Cr√©er l'ic√¥ne macOS
function createMacIcon() {
    console.log('üé® Cr√©ation de l\'ic√¥ne macOS...');
    
    const iconScript = path.join(__dirname, 'create-mac-icon.js');
    if (fs.existsSync(iconScript)) {
        runCommand(`node "${iconScript}"`, 'G√©n√©ration de l\'ic√¥ne macOS', true);
    } else {
        console.log('‚ö†Ô∏è  Script d\'ic√¥ne non trouv√© - ic√¥ne par d√©faut sera utilis√©e');
    }
    
    console.log('');
}

// Valider la configuration
function validateConfiguration() {
    console.log('‚úÖ Validation de la configuration...');
    
    // V√©rifier que les fichiers essentiels existent
    const requiredFiles = [
        'main.js',
        'package.json',
        'database.js',
        'preload.js'
    ];
    
    for (const file of requiredFiles) {
        if (!fs.existsSync(file)) {
            throw new Error(`Fichier requis manquant: ${file}`);
        }
    }
    
    // V√©rifier la configuration electron-builder
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (!packageJson.build || !packageJson.build.mac) {
        throw new Error('Configuration macOS manquante dans package.json');
    }
    
    console.log('‚úÖ Configuration valid√©e');
    console.log('');
}

// Fonction principale
async function main() {
    try {
        checkMacOSEnvironment();
        installSystemDependencies();
        setupNativeModules();
        createMacIcon();
        validateConfiguration();
        
        console.log('üéâ Configuration macOS termin√©e avec succ√®s !');
        console.log('');
        console.log('üí° Vous pouvez maintenant ex√©cuter:');
        console.log('   npm run dist:mac        # Build macOS (Intel + Apple Silicon)');
        console.log('   npm run dist:mac-universal # Build universel macOS');
        console.log('');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    main();
}

module.exports = {
    checkMacOSEnvironment,
    installSystemDependencies,
    setupNativeModules,
    createMacIcon,
    validateConfiguration
};
