// test-pied-page-factures.js - Test de la personnalisation du pied de page des factures

console.log('üìÑ === TEST PIED DE PAGE FACTURES ===');

/**
 * Test complet de la personnalisation du pied de page
 */
async function testFooterCustomization() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DE L\'ENVIRONNEMENT');
        
        // V√©rifier qu'on est sur la page de personnalisation
        if (window.location.href.includes('template-designer.html')) {
            console.log('‚úÖ Page de personnalisation des templates d√©tect√©e');
            await testFooterDesigner();
        } else if (window.location.href.includes('invoices.html')) {
            console.log('‚úÖ Page des factures d√©tect√©e');
            await testFooterInInvoices();
        } else {
            console.log('‚ö†Ô∏è Page non reconnue, test g√©n√©rique');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

/**
 * Test des contr√¥les du pied de page dans le designer
 */
async function testFooterDesigner() {
    console.log('\n2Ô∏è‚É£ TEST DES CONTR√îLES DU PIED DE PAGE');
    
    // V√©rifier que les √©l√©ments existent
    const footerInputs = {
        thankYou: document.getElementById('footerThankYou'),
        paymentTerms: document.getElementById('footerPaymentTerms'),
        customMessage: document.getElementById('footerCustomMessage'),
        legalInfo: document.getElementById('footerLegalInfo')
    };
    
    const resetBtn = document.getElementById('resetFooterBtn');
    
    console.log('üîç V√©rification des √©l√©ments DOM:');
    Object.keys(footerInputs).forEach(key => {
        const element = footerInputs[key];
        console.log(`   - ${key}: ${element ? '‚úÖ' : '‚ùå'}`);
    });
    console.log(`   - Bouton reset: ${resetBtn ? '‚úÖ' : '‚ùå'}`);
    
    if (!Object.values(footerInputs).every(el => el)) {
        console.error('‚ùå Certains √©l√©ments du pied de page sont manquants');
        return;
    }
    
    console.log('\n3Ô∏è‚É£ TEST DES VALEURS PAR D√âFAUT');
    
    // V√©rifier les valeurs par d√©faut
    const defaultValues = {
        thankYou: 'Merci pour votre confiance',
        paymentTerms: 'Conditions de paiement: 30 jours',
        customMessage: 'Cette facture est g√©n√©r√©e automatiquement par le syst√®me de gestion.',
        legalInfo: 'ICE: 123456789012345 ‚Ä¢ RC: 12345 ‚Ä¢ CNSS: 67890'
    };
    
    Object.keys(defaultValues).forEach(key => {
        const element = footerInputs[key];
        const expectedValue = defaultValues[key];
        const actualValue = element.value;
        
        console.log(`üìù ${key}:`);
        console.log(`   Attendu: "${expectedValue}"`);
        console.log(`   Actuel: "${actualValue}"`);
        console.log(`   Status: ${actualValue.includes(expectedValue.split(' ')[0]) ? '‚úÖ' : '‚ö†Ô∏è'}`);
    });
    
    console.log('\n4Ô∏è‚É£ TEST DE MODIFICATION DES VALEURS');
    
    // Tester la modification des valeurs
    const testValues = {
        thankYou: 'Merci beaucoup pour votre confiance !',
        paymentTerms: 'Paiement sous 15 jours',
        customMessage: 'Facture g√©n√©r√©e par GestionPro - Syst√®me de gestion moderne.',
        legalInfo: 'ICE: 987654321098765 ‚Ä¢ RC: 54321 ‚Ä¢ CNSS: 09876 ‚Ä¢ Patente: 12345678'
    };
    
    Object.keys(testValues).forEach(key => {
        const element = footerInputs[key];
        const testValue = testValues[key];
        
        // Sauvegarder la valeur originale
        const originalValue = element.value;
        
        // Modifier la valeur
        element.value = testValue;
        element.dispatchEvent(new Event('input', { bubbles: true }));
        
        console.log(`‚úèÔ∏è ${key}: "${testValue}" ${element.value === testValue ? '‚úÖ' : '‚ùå'}`);
        
        // Restaurer la valeur originale apr√®s un d√©lai
        setTimeout(() => {
            element.value = originalValue;
            element.dispatchEvent(new Event('input', { bubbles: true }));
        }, 2000);
    });
    
    console.log('\n5Ô∏è‚É£ TEST DU BOUTON DE R√âINITIALISATION');
    
    if (resetBtn) {
        console.log('üîÑ Test du bouton de r√©initialisation...');
        
        // Modifier quelques valeurs
        footerInputs.thankYou.value = 'Test modifi√©';
        footerInputs.paymentTerms.value = 'Test modifi√©';
        
        // Cliquer sur reset
        resetBtn.click();
        
        // V√©rifier apr√®s un d√©lai
        setTimeout(() => {
            const isReset = footerInputs.thankYou.value.includes('Merci') && 
                           footerInputs.paymentTerms.value.includes('Conditions');
            console.log(`   R√©initialisation: ${isReset ? '‚úÖ' : '‚ùå'}`);
        }, 500);
    }
    
    console.log('\n6Ô∏è‚É£ TEST DE SAUVEGARDE');
    
    // Tester la fonction de r√©cup√©ration des donn√©es
    if (window.templateDesigner && window.templateDesigner.getTemplateDataFromForm) {
        try {
            const templateData = window.templateDesigner.getTemplateDataFromForm();
            
            console.log('üíæ Donn√©es du template r√©cup√©r√©es:');
            console.log('   - footer_content:', templateData.footer_content);
            
            if (templateData.footer_content) {
                console.log('‚úÖ Le contenu du pied de page est inclus dans la sauvegarde');
                Object.keys(templateData.footer_content).forEach(key => {
                    console.log(`     - ${key}: "${templateData.footer_content[key]}"`);
                });
            } else {
                console.warn('‚ö†Ô∏è Le contenu du pied de page n\'est pas inclus dans la sauvegarde');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de tester la sauvegarde:', error.message);
        }
    }
}

/**
 * Test du pied de page dans les factures g√©n√©r√©es
 */
async function testFooterInInvoices() {
    console.log('\n2Ô∏è‚É£ TEST DU PIED DE PAGE DANS LES FACTURES');
    
    // V√©rifier les fonctions disponibles
    const functions = {
        getFooterContent: typeof getFooterContent === 'function',
        getDefaultFooterContent: typeof getDefaultFooterContent === 'function',
        generatePrintableInvoice: typeof generatePrintableInvoice === 'function'
    };
    
    console.log('üîç Fonctions disponibles:');
    Object.keys(functions).forEach(key => {
        console.log(`   - ${key}: ${functions[key] ? '‚úÖ' : '‚ùå'}`);
    });
    
    if (functions.getFooterContent) {
        console.log('\n3Ô∏è‚É£ TEST DE R√âCUP√âRATION DU CONTENU');
        
        try {
            const footerContent = await getFooterContent();
            console.log('üìÑ Contenu du pied de page r√©cup√©r√©:');
            console.log(`   - Message de remerciement: "${footerContent.thank_you_message}"`);
            console.log(`   - Conditions de paiement: "${footerContent.payment_terms}"`);
            console.log(`   - Message personnalis√©: "${footerContent.custom_message}"`);
            console.log(`   - Informations l√©gales: "${footerContent.legal_info}"`);
            
            console.log('‚úÖ R√©cup√©ration du contenu du pied de page r√©ussie');
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
        }
    }
    
    if (functions.getDefaultFooterContent) {
        console.log('\n4Ô∏è‚É£ TEST DU CONTENU PAR D√âFAUT');
        
        const defaultContent = getDefaultFooterContent();
        console.log('üìÑ Contenu par d√©faut:');
        Object.keys(defaultContent).forEach(key => {
            console.log(`   - ${key}: "${defaultContent[key]}"`);
        });
        
        console.log('‚úÖ Contenu par d√©faut disponible');
    }
    
    console.log('\n5Ô∏è‚É£ TEST DE G√âN√âRATION HTML');
    
    // Cr√©er un aper√ßu du pied de page
    if (functions.getFooterContent) {
        try {
            const footerContent = await getFooterContent();
            
            const footerHTML = `
                <div class="footer-preview" style="
                    border: 2px solid #ddd; 
                    padding: 15px; 
                    margin: 20px; 
                    background: #f9f9f9;
                    font-family: Arial, sans-serif;
                    font-size: 12px;
                ">
                    <h4 style="margin: 0 0 10px 0; color: #333;">üìÑ Aper√ßu du Pied de Page</h4>
                    <div class="legal-mentions" style="margin-bottom: 10px;">
                        <div style="margin-bottom: 5px; font-weight: 500;">${footerContent.thank_you_message}</div>
                        <div style="margin-bottom: 5px; font-weight: 500;">${footerContent.payment_terms}</div>
                    </div>
                    <div class="custom-message" style="margin-bottom: 10px; font-style: italic; color: #555;">
                        ${footerContent.custom_message}
                    </div>
                    <div class="legal-info" style="font-size: 10px; color: #777; text-align: center; border-top: 1px solid #eee; padding-top: 8px;">
                        ${footerContent.legal_info}
                    </div>
                    <button onclick="this.parentElement.remove()" style="position: absolute; top: 5px; right: 5px; background: red; color: white; border: none; padding: 2px 6px; cursor: pointer;">‚úï</button>
                </div>
            `;
            
            // Ajouter l'aper√ßu √† la page
            const previewContainer = document.createElement('div');
            previewContainer.innerHTML = footerHTML;
            previewContainer.style.position = 'fixed';
            previewContainer.style.top = '50px';
            previewContainer.style.right = '50px';
            previewContainer.style.zIndex = '10000';
            previewContainer.style.maxWidth = '400px';
            
            document.body.appendChild(previewContainer);
            
            console.log('‚úÖ Aper√ßu du pied de page cr√©√© (coin sup√©rieur droit)');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la cr√©ation de l\'aper√ßu:', error);
        }
    }
}

/**
 * Test rapide du pied de page
 */
async function testQuickFooter() {
    console.log('\nüöÄ === TEST RAPIDE PIED DE PAGE ===');
    
    if (window.location.href.includes('template-designer.html')) {
        // Test rapide du designer
        const inputs = ['footerThankYou', 'footerPaymentTerms', 'footerCustomMessage', 'footerLegalInfo'];
        const found = inputs.filter(id => document.getElementById(id));
        
        console.log(`üìù Contr√¥les trouv√©s: ${found.length}/${inputs.length}`);
        found.forEach(id => {
            const element = document.getElementById(id);
            console.log(`   - ${id}: "${element.value.substring(0, 30)}..."`);
        });
        
    } else if (window.location.href.includes('invoices.html')) {
        // Test rapide des factures
        if (typeof getFooterContent === 'function') {
            try {
                const content = await getFooterContent();
                console.log('üìÑ Contenu r√©cup√©r√© avec succ√®s');
                console.log(`   - Remerciement: "${content.thank_you_message.substring(0, 20)}..."`);
                console.log(`   - Conditions: "${content.payment_terms.substring(0, 20)}..."`);
            } catch (error) {
                console.error('‚ùå Erreur:', error.message);
            }
        } else {
            console.error('‚ùå Fonction getFooterContent non disponible');
        }
    }
}

/**
 * Test sp√©cifique pour diagnostiquer le probl√®me de sauvegarde
 */
async function debugFooterSave() {
    console.log('\nüîß === DEBUG SAUVEGARDE PIED DE PAGE ===');

    if (!window.location.href.includes('template-designer.html')) {
        console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page de personnalisation');
        return;
    }

    // V√©rifier les √©l√©ments
    const footerInputs = {
        thankYou: document.getElementById('footerThankYou'),
        paymentTerms: document.getElementById('footerPaymentTerms'),
        customMessage: document.getElementById('footerCustomMessage'),
        legalInfo: document.getElementById('footerLegalInfo')
    };

    console.log('1Ô∏è‚É£ √âTAT ACTUEL DES CHAMPS:');
    Object.keys(footerInputs).forEach(key => {
        const element = footerInputs[key];
        if (element) {
            console.log(`   - ${key}: "${element.value}"`);
        } else {
            console.log(`   - ${key}: ‚ùå √âL√âMENT NON TROUV√â`);
        }
    });

    console.log('\n2Ô∏è‚É£ MODIFICATION DES VALEURS:');
    const testValues = {
        thankYou: 'TEST: Merci pour votre confiance modifi√©',
        paymentTerms: 'TEST: Paiement sous 15 jours',
        customMessage: 'TEST: Message personnalis√© modifi√© pour le test',
        legalInfo: 'TEST: ICE: 999999999999999 ‚Ä¢ RC: 99999 ‚Ä¢ CNSS: 99999'
    };

    // Modifier les valeurs
    Object.keys(testValues).forEach(key => {
        const element = footerInputs[key];
        if (element) {
            element.value = testValues[key];
            element.dispatchEvent(new Event('input', { bubbles: true }));
            console.log(`   ‚úèÔ∏è ${key} modifi√©: "${testValues[key]}"`);
        }
    });

    console.log('\n3Ô∏è‚É£ V√âRIFICATION APR√àS MODIFICATION:');
    Object.keys(footerInputs).forEach(key => {
        const element = footerInputs[key];
        if (element) {
            console.log(`   - ${key}: "${element.value}"`);
        }
    });

    console.log('\n4Ô∏è‚É£ TEST DE LA FONCTION getTemplateDataFromForm():');
    if (window.templateDesigner && window.templateDesigner.getTemplateDataFromForm) {
        try {
            const templateData = window.templateDesigner.getTemplateDataFromForm();
            console.log('üìä Donn√©es r√©cup√©r√©es:');
            console.log('   - footer_content:', templateData.footer_content);

            if (templateData.footer_content) {
                Object.keys(templateData.footer_content).forEach(key => {
                    console.log(`     - ${key}: "${templateData.footer_content[key]}"`);
                });
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
        }
    } else {
        console.error('‚ùå templateDesigner.getTemplateDataFromForm non disponible');
    }

    console.log('\n5Ô∏è‚É£ SIMULATION DE SAUVEGARDE:');
    if (window.templateDesigner && window.templateDesigner.saveTemplate) {
        console.log('üíæ Tentative de sauvegarde...');
        try {
            await window.templateDesigner.saveTemplate();
            console.log('‚úÖ Sauvegarde termin√©e');
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde:', error);
        }
    } else {
        console.warn('‚ö†Ô∏è Fonction de sauvegarde non disponible pour le test');
    }

    console.log('\n6Ô∏è‚É£ V√âRIFICATION APR√àS SAUVEGARDE:');
    setTimeout(() => {
        Object.keys(footerInputs).forEach(key => {
            const element = footerInputs[key];
            if (element) {
                const isStillModified = element.value.includes('TEST:');
                console.log(`   - ${key}: "${element.value}" ${isStillModified ? '‚úÖ CONSERV√â' : '‚ùå R√âINITIALIS√â'}`);
            }
        });

        console.log('\nüéØ DIAGNOSTIC:');
        const allConserved = Object.keys(footerInputs).every(key => {
            const element = footerInputs[key];
            return element && element.value.includes('TEST:');
        });

        if (allConserved) {
            console.log('‚úÖ PROBL√àME R√âSOLU: Les valeurs sont conserv√©es apr√®s sauvegarde');
        } else {
            console.log('‚ùå PROBL√àME PERSISTANT: Les valeurs sont r√©initialis√©es apr√®s sauvegarde');
            console.log('üîç Causes possibles:');
            console.log('   1. Le template est recharg√© apr√®s sauvegarde');
            console.log('   2. Les donn√©es ne sont pas correctement sauvegard√©es en base');
            console.log('   3. Le parsing JSON √©choue lors du rechargement');
            console.log('   4. Les √©v√©nements de rechargement √©crasent les valeurs');
        }
    }, 2000);
}

// Exporter les fonctions
window.testFooterCustomization = testFooterCustomization;
window.testFooterDesigner = testFooterDesigner;
window.testFooterInInvoices = testFooterInInvoices;
window.testQuickFooter = testQuickFooter;
window.debugFooterSave = debugFooterSave;
window.testFooterSaveFix = testFooterSaveFix;

/**
 * Test de v√©rification de la correction
 */
async function testFooterSaveFix() {
    console.log('\nüîß === TEST CORRECTION SAUVEGARDE PIED DE PAGE ===');

    if (!window.location.href.includes('template-designer.html')) {
        console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page de personnalisation');
        return;
    }

    console.log('1Ô∏è‚É£ V√âRIFICATION DU TEMPLATE MANAGER');

    // V√©rifier que le template manager parse footer_content
    if (window.templateManager) {
        console.log('‚úÖ TemplateManager disponible');

        // Tester le rechargement d'un template
        try {
            const currentTemplate = await window.templateManager.getCurrentTemplate();
            if (currentTemplate) {
                console.log('üìã Template actuel:', currentTemplate.display_name);
                console.log('üìÑ footer_content type:', typeof currentTemplate.footer_content);
                console.log('üìÑ footer_content value:', currentTemplate.footer_content);

                if (typeof currentTemplate.footer_content === 'object') {
                    console.log('‚úÖ footer_content est correctement pars√© en objet');
                } else {
                    console.log('‚ö†Ô∏è footer_content n\'est pas un objet, parsing n√©cessaire');
                }
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du template:', error);
        }
    } else {
        console.error('‚ùå TemplateManager non disponible');
    }

    console.log('\n2Ô∏è‚É£ TEST DE SAUVEGARDE COMPL√àTE');

    const footerInputs = {
        thankYou: document.getElementById('footerThankYou'),
        paymentTerms: document.getElementById('footerPaymentTerms'),
        customMessage: document.getElementById('footerCustomMessage'),
        legalInfo: document.getElementById('footerLegalInfo')
    };

    // Valeurs de test uniques
    const timestamp = Date.now();
    const testValues = {
        thankYou: `TEST-${timestamp}: Merci pour votre confiance`,
        paymentTerms: `TEST-${timestamp}: Paiement sous 15 jours`,
        customMessage: `TEST-${timestamp}: Message personnalis√© pour le test`,
        legalInfo: `TEST-${timestamp}: ICE: 999999999999999 ‚Ä¢ RC: 99999`
    };

    console.log('üìù Modification des valeurs avec timestamp:', timestamp);

    // Modifier les valeurs
    Object.keys(testValues).forEach(key => {
        const element = footerInputs[key];
        if (element) {
            element.value = testValues[key];
            element.dispatchEvent(new Event('input', { bubbles: true }));
            console.log(`   ‚úèÔ∏è ${key}: "${testValues[key]}"`);
        }
    });

    console.log('\n3Ô∏è‚É£ SAUVEGARDE ET V√âRIFICATION');

    if (window.templateDesigner && window.templateDesigner.saveTemplate) {
        try {
            console.log('üíæ Sauvegarde en cours...');
            await window.templateDesigner.saveTemplate();
            console.log('‚úÖ Sauvegarde termin√©e');

            // Attendre un peu pour que le rechargement se termine
            setTimeout(async () => {
                console.log('\n4Ô∏è‚É£ V√âRIFICATION APR√àS RECHARGEMENT');

                let allPreserved = true;
                Object.keys(testValues).forEach(key => {
                    const element = footerInputs[key];
                    if (element) {
                        const isPreserved = element.value.includes(`TEST-${timestamp}`);
                        console.log(`   - ${key}: "${element.value}" ${isPreserved ? '‚úÖ CONSERV√â' : '‚ùå PERDU'}`);
                        if (!isPreserved) allPreserved = false;
                    }
                });

                console.log('\nüéØ R√âSULTAT FINAL:');
                if (allPreserved) {
                    console.log('üéâ SUCC√àS: La correction fonctionne ! Les valeurs sont conserv√©es apr√®s sauvegarde.');
                    console.log('‚úÖ Le probl√®me de r√©initialisation du pied de page est r√©solu.');
                } else {
                    console.log('‚ùå √âCHEC: Le probl√®me persiste. Les valeurs sont encore perdues.');
                    console.log('üîç V√©rifiez les logs de debug pour plus d\'informations.');
                }

                // V√©rifier aussi dans la base de donn√©es
                try {
                    const currentTemplate = await window.templateManager.getCurrentTemplate();
                    if (currentTemplate && currentTemplate.footer_content) {
                        console.log('\nüìä V√âRIFICATION BASE DE DONN√âES:');
                        console.log('   - footer_content en base:', currentTemplate.footer_content);

                        const hasTestData = JSON.stringify(currentTemplate.footer_content).includes(`TEST-${timestamp}`);
                        console.log(`   - Donn√©es de test en base: ${hasTestData ? '‚úÖ PR√âSENTES' : '‚ùå ABSENTES'}`);
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Impossible de v√©rifier la base de donn√©es:', error);
                }

            }, 3000); // Attendre 3 secondes pour le rechargement

        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde:', error);
        }
    } else {
        console.error('‚ùå Fonction de sauvegarde non disponible');
    }
}

console.log('üõ†Ô∏è Fonctions de test disponibles:');
console.log('- testFooterCustomization() : Test complet de la personnalisation du pied de page');
console.log('- testQuickFooter() : Test rapide du pied de page');
console.log('- debugFooterSave() : Diagnostic du probl√®me de sauvegarde');
console.log('- testFooterSaveFix() : Test de v√©rification de la correction');
console.log('\nüí° Pour tester la correction: testFooterSaveFix()');
