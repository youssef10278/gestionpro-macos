// test-marges-factures.js - Test des contr√¥les de marges dans la personnalisation des factures

console.log('üìè === TEST CONTR√îLES DE MARGES FACTURES ===');

/**
 * Test complet des contr√¥les de marges
 */
async function testMarginControls() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DE L\'ENVIRONNEMENT');
        
        // V√©rifier qu'on est sur la page de personnalisation
        if (!window.location.href.includes('template-designer.html')) {
            console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page de personnalisation des factures');
            return;
        }
        
        console.log('‚úÖ Page de personnalisation d√©tect√©e');
        
        console.log('\n2Ô∏è‚É£ V√âRIFICATION DES CONTR√îLES DE MARGES');
        
        // V√©rifier que tous les contr√¥les de marges existent
        const marginControls = {
            marginTop: document.getElementById('marginTop'),
            marginTopValue: document.getElementById('marginTopValue'),
            marginRight: document.getElementById('marginRight'),
            marginRightValue: document.getElementById('marginRightValue'),
            marginBottom: document.getElementById('marginBottom'),
            marginBottomValue: document.getElementById('marginBottomValue'),
            marginLeft: document.getElementById('marginLeft'),
            marginLeftValue: document.getElementById('marginLeftValue'),
            resetBtn: document.getElementById('resetMarginsBtn')
        };
        
        console.log('üìä Contr√¥les trouv√©s:');
        Object.entries(marginControls).forEach(([name, element]) => {
            console.log(`   - ${name}: ${element ? '‚úÖ' : '‚ùå'}`);
        });
        
        // V√©rifier que tous les contr√¥les sont pr√©sents
        const missingControls = Object.entries(marginControls)
            .filter(([name, element]) => !element)
            .map(([name]) => name);
            
        if (missingControls.length > 0) {
            console.error('‚ùå Contr√¥les manquants:', missingControls);
            return;
        }
        
        console.log('‚úÖ Tous les contr√¥les de marges sont pr√©sents');
        
        console.log('\n3Ô∏è‚É£ TEST DES VALEURS INITIALES');
        
        // V√©rifier les valeurs initiales
        const initialValues = {
            top: marginControls.marginTop.value,
            topDisplay: marginControls.marginTopValue.textContent,
            right: marginControls.marginRight.value,
            rightDisplay: marginControls.marginRightValue.textContent,
            bottom: marginControls.marginBottom.value,
            bottomDisplay: marginControls.marginBottomValue.textContent,
            left: marginControls.marginLeft.value,
            leftDisplay: marginControls.marginLeftValue.textContent
        };
        
        console.log('üìä Valeurs initiales:');
        console.log(`   - Haut: ${initialValues.top} (affich√©: ${initialValues.topDisplay})`);
        console.log(`   - Droite: ${initialValues.right} (affich√©: ${initialValues.rightDisplay})`);
        console.log(`   - Bas: ${initialValues.bottom} (affich√©: ${initialValues.bottomDisplay})`);
        console.log(`   - Gauche: ${initialValues.left} (affich√©: ${initialValues.leftDisplay})`);
        
        console.log('\n4Ô∏è‚É£ TEST DE MODIFICATION DES MARGES');
        
        // Tester la modification de chaque marge
        const testValues = {
            marginTop: 30,
            marginRight: 25,
            marginBottom: 35,
            marginLeft: 15
        };
        
        for (const [controlName, testValue] of Object.entries(testValues)) {
            console.log(`üîß Test ${controlName} = ${testValue}mm`);
            
            const slider = marginControls[controlName];
            const valueDisplay = marginControls[controlName + 'Value'];
            
            // Modifier la valeur
            slider.value = testValue;
            slider.dispatchEvent(new Event('input', { bubbles: true }));
            
            // Attendre un peu pour que l'affichage se mette √† jour
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // V√©rifier que l'affichage s'est mis √† jour
            const displayedValue = valueDisplay.textContent;
            const expectedDisplay = testValue + 'mm';
            
            console.log(`   - Valeur slider: ${slider.value}`);
            console.log(`   - Affichage: ${displayedValue}`);
            console.log(`   - Attendu: ${expectedDisplay}`);
            console.log(`   - Correct: ${displayedValue === expectedDisplay ? '‚úÖ' : '‚ùå'}`);
        }
        
        console.log('\n5Ô∏è‚É£ TEST DE L\'APER√áU');
        
        // V√©rifier que l'aper√ßu se met √† jour
        const previewContainer = document.getElementById('invoicePreview');
        if (previewContainer) {
            console.log('‚úÖ Conteneur d\'aper√ßu trouv√©');
            
            // V√©rifier les styles appliqu√©s
            const computedStyle = window.getComputedStyle(previewContainer.querySelector('.preview-invoice') || previewContainer);
            const padding = computedStyle.padding;
            
            console.log('üìä Styles d\'aper√ßu:');
            console.log(`   - Padding: ${padding}`);
            
            // V√©rifier que les marges sont appliqu√©es dans le CSS
            const styleElements = document.querySelectorAll('style');
            let marginStyleFound = false;
            
            styleElements.forEach(style => {
                if (style.textContent.includes('preview-invoice') && style.textContent.includes('padding:')) {
                    marginStyleFound = true;
                    console.log('‚úÖ Styles de marges trouv√©s dans le CSS');
                }
            });
            
            if (!marginStyleFound) {
                console.warn('‚ö†Ô∏è Styles de marges non trouv√©s dans le CSS');
            }
            
        } else {
            console.warn('‚ö†Ô∏è Conteneur d\'aper√ßu non trouv√©');
        }
        
        console.log('\n6Ô∏è‚É£ TEST DU BOUTON DE R√âINITIALISATION');
        
        // Tester le bouton de r√©initialisation
        console.log('üîÑ Test du bouton de r√©initialisation...');
        
        marginControls.resetBtn.click();
        
        // Attendre que la r√©initialisation se fasse
        await new Promise(resolve => setTimeout(resolve, 200));
        
        // V√©rifier que les valeurs sont revenues aux valeurs par d√©faut
        const resetValues = {
            top: marginControls.marginTop.value,
            right: marginControls.marginRight.value,
            bottom: marginControls.marginBottom.value,
            left: marginControls.marginLeft.value
        };
        
        console.log('üìä Valeurs apr√®s r√©initialisation:');
        console.log(`   - Haut: ${resetValues.top}mm`);
        console.log(`   - Droite: ${resetValues.right}mm`);
        console.log(`   - Bas: ${resetValues.bottom}mm`);
        console.log(`   - Gauche: ${resetValues.left}mm`);
        
        // V√©rifier que toutes les valeurs sont √† 20 (valeur par d√©faut)
        const allReset = Object.values(resetValues).every(value => value == '20');
        console.log(`üéØ R√©initialisation: ${allReset ? '‚úÖ Succ√®s' : '‚ùå √âchec'}`);
        
        console.log('\n7Ô∏è‚É£ TEST DE SAUVEGARDE');
        
        // Tester que les marges sont incluses dans les donn√©es du template
        if (typeof window.templateDesigner !== 'undefined' && window.templateDesigner.getTemplateDataFromForm) {
            console.log('üß™ Test de r√©cup√©ration des donn√©es...');
            
            // Modifier quelques valeurs
            marginControls.marginTop.value = 25;
            marginControls.marginRight.value = 30;
            marginControls.marginBottom.value = 25;
            marginControls.marginLeft.value = 30;
            
            // R√©cup√©rer les donn√©es
            const templateData = window.templateDesigner.getTemplateDataFromForm();
            
            console.log('üìä Donn√©es du template:');
            console.log('   - Layout config:', templateData.layout_config);
            console.log('   - Page margins:', templateData.layout_config?.page_margins);
            
            // V√©rifier que les marges sont incluses
            const margins = templateData.layout_config?.page_margins;
            if (margins) {
                console.log('‚úÖ Marges incluses dans les donn√©es:');
                console.log(`   - Haut: ${margins.top}`);
                console.log(`   - Droite: ${margins.right}`);
                console.log(`   - Bas: ${margins.bottom}`);
                console.log(`   - Gauche: ${margins.left}`);
            } else {
                console.error('‚ùå Marges non incluses dans les donn√©es');
            }
        } else {
            console.warn('‚ö†Ô∏è templateDesigner non disponible pour le test de sauvegarde');
        }
        
        console.log('\nüéØ R√âSULTAT FINAL');
        console.log('‚úÖ Test des contr√¥les de marges termin√©');
        console.log('üìã V√©rifiez les r√©sultats ci-dessus pour identifier les probl√®mes');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

/**
 * Test rapide des marges
 */
function testQuickMargins() {
    console.log('\nüöÄ === TEST RAPIDE MARGES ===');
    
    const controls = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'];
    
    controls.forEach(controlName => {
        const element = document.getElementById(controlName);
        const valueElement = document.getElementById(controlName + 'Value');
        
        if (element && valueElement) {
            console.log(`‚úÖ ${controlName}: ${element.value} (${valueElement.textContent})`);
        } else {
            console.log(`‚ùå ${controlName}: Contr√¥le manquant`);
        }
    });
    
    const resetBtn = document.getElementById('resetMarginsBtn');
    console.log(`üîÑ Bouton reset: ${resetBtn ? '‚úÖ' : '‚ùå'}`);
}

/**
 * D√©finir des marges personnalis√©es
 */
function setCustomMargins(top = 25, right = 20, bottom = 25, left = 20) {
    console.log('\nüé® === D√âFINITION MARGES PERSONNALIS√âES ===');
    console.log(`üìè Marges: ${top}mm ${right}mm ${bottom}mm ${left}mm`);
    
    const margins = {
        marginTop: top,
        marginRight: right,
        marginBottom: bottom,
        marginLeft: left
    };
    
    Object.entries(margins).forEach(([controlName, value]) => {
        const element = document.getElementById(controlName);
        if (element) {
            element.value = value;
            element.dispatchEvent(new Event('input', { bubbles: true }));
            console.log(`‚úÖ ${controlName} d√©fini √† ${value}mm`);
        } else {
            console.error(`‚ùå Contr√¥le ${controlName} non trouv√©`);
        }
    });
    
    console.log('üéØ Marges personnalis√©es appliqu√©es');
}

// Exporter les fonctions
window.testMarginControls = testMarginControls;
window.testQuickMargins = testQuickMargins;
window.setCustomMargins = setCustomMargins;

console.log('üõ†Ô∏è Fonctions de test disponibles:');
console.log('- testMarginControls() : Test complet des contr√¥les de marges');
console.log('- testQuickMargins() : Test rapide des contr√¥les');
console.log('- setCustomMargins(top, right, bottom, left) : D√©finir des marges personnalis√©es');
console.log('\nüí° Commencez par: testMarginControls()');
