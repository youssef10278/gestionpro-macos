// debug-selection-produits.js - Debug sp√©cifique pour la s√©lection de produits

console.log('üêõ === DEBUG S√âLECTION PRODUITS ===');

/**
 * Test sp√©cifique de la s√©lection de produits
 */
async function debugProductSelection() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DE L\'ENVIRONNEMENT');
        
        // V√©rifier qu'on est sur la page factures
        if (!window.location.href.includes('invoices.html')) {
            console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page des factures');
            return;
        }
        
        // V√©rifier qu'il y a une facture en cours d'√©dition
        const descriptionInputs = document.querySelectorAll('.description-input');
        if (descriptionInputs.length === 0) {
            console.error('‚ùå Aucun champ de description trouv√©. Cr√©ez une nouvelle facture d\'abord.');
            return;
        }
        
        console.log('‚úÖ Environnement OK');
        console.log('üìù Champs de description trouv√©s:', descriptionInputs.length);
        
        console.log('\n2Ô∏è‚É£ TEST DE RECHERCHE');
        
        const firstInput = descriptionInputs[0];
        const container = firstInput.parentElement.querySelector('.search-results-container');
        
        if (!container) {
            console.error('‚ùå Conteneur de r√©sultats non trouv√©');
            return;
        }
        
        // Effectuer une recherche
        console.log('üîç Recherche avec "ord"...');
        firstInput.value = 'ord';
        firstInput.dispatchEvent(new Event('input', { bubbles: true }));
        
        // Attendre que les r√©sultats apparaissent
        await new Promise(resolve => setTimeout(resolve, 200));
        
        const isVisible = !container.classList.contains('hidden');
        const resultItems = container.querySelectorAll('.search-result-item');
        
        console.log('üìä R√©sultats visibles:', isVisible);
        console.log('üìä Nombre de r√©sultats:', resultItems.length);
        
        if (resultItems.length === 0) {
            console.error('‚ùå Aucun r√©sultat trouv√©. V√©rifiez que des produits sont charg√©s.');
            return;
        }
        
        console.log('\n3Ô∏è‚É£ ANALYSE DES R√âSULTATS');
        
        resultItems.forEach((item, index) => {
            console.log(`üì¶ R√©sultat ${index + 1}:`);
            console.log(`   - Nom: ${item.dataset.productName}`);
            console.log(`   - Prix: ${item.dataset.productPrice}`);
            console.log(`   - Unit√©: ${item.dataset.productUnit}`);
            console.log(`   - Classes CSS: ${item.className}`);
            console.log(`   - √âv√©nements attach√©s:`, getEventListeners ? getEventListeners(item) : 'Non disponible');
        });
        
        console.log('\n4Ô∏è‚É£ TEST DE S√âLECTION MANUELLE');
        
        const firstResult = resultItems[0];
        const productName = firstResult.dataset.productName;
        
        console.log(`üéØ Test de s√©lection manuelle: ${productName}`);
        
        // Tester la fonction selectProduct directement
        if (typeof selectProduct === 'function') {
            console.log('‚úÖ Fonction selectProduct disponible');
            
            // Appeler directement la fonction
            selectProduct(firstResult, firstInput);
            
            // V√©rifier le r√©sultat
            await new Promise(resolve => setTimeout(resolve, 100));
            
            console.log('üìù Valeur du champ apr√®s s√©lection:', firstInput.value);
            
            // V√©rifier le prix
            const row = firstInput.closest('.invoice-item-row');
            if (row) {
                const priceInput = row.querySelector('[name="unit_price"]');
                console.log('üí∞ Prix apr√®s s√©lection:', priceInput?.value);
            }
            
        } else {
            console.error('‚ùå Fonction selectProduct non disponible');
        }
        
        console.log('\n5Ô∏è‚É£ TEST DE CLIC SIMUL√â');
        
        // Remettre la recherche
        firstInput.value = 'ord';
        firstInput.dispatchEvent(new Event('input', { bubbles: true }));
        
        await new Promise(resolve => setTimeout(resolve, 200));
        
        const newResultItems = container.querySelectorAll('.search-result-item');
        if (newResultItems.length > 0) {
            const testItem = newResultItems[0];
            
            console.log('üñ±Ô∏è Simulation de clic...');
            
            // Essayer diff√©rents types d'√©v√©nements
            const events = ['click', 'mousedown', 'mouseup'];
            
            for (const eventType of events) {
                console.log(`   - Test ${eventType}...`);
                
                const event = new MouseEvent(eventType, {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                
                testItem.dispatchEvent(event);
                
                await new Promise(resolve => setTimeout(resolve, 100));
                
                console.log(`   - Valeur apr√®s ${eventType}:`, firstInput.value);
            }
        }
        
        console.log('\n6Ô∏è‚É£ V√âRIFICATION DES √âV√âNEMENTS');
        
        // V√©rifier que les √©v√©nements sont bien attach√©s
        const testContainer = firstInput.parentElement.querySelector('.search-results-container');
        const testItems = testContainer.querySelectorAll('.search-result-item');
        
        console.log('üîó V√©rification des √©v√©nements attach√©s:');
        testItems.forEach((item, index) => {
            console.log(`   Item ${index + 1}:`);
            console.log(`   - onclick:`, item.onclick);
            console.log(`   - addEventListener:`, item._listeners || 'Non visible');
            
            // Tester l'ajout manuel d'√©v√©nement
            item.style.backgroundColor = '#ffeb3b'; // Jaune pour identifier
            item.addEventListener('click', function testClick() {
                console.log('üéâ CLIC MANUEL D√âTECT√â sur:', this.dataset.productName);
                firstInput.value = this.dataset.productName;
                testContainer.classList.add('hidden');
            });
        });
        
        console.log('\n7Ô∏è‚É£ INSTRUCTIONS POUR TEST MANUEL');
        console.log('üñ±Ô∏è Les √©l√©ments avec fond jaune ont maintenant des √©v√©nements de test');
        console.log('üëÜ Essayez de cliquer sur un √©l√©ment jaune dans les suggestions');
        console.log('üìù Le champ devrait se remplir avec le nom du produit');
        
        console.log('\nüéØ R√âSULTAT DU DEBUG');
        console.log('‚úÖ Debug termin√© - V√©rifiez les logs ci-dessus');
        console.log('üí° Si les √©l√©ments jaunes fonctionnent, le probl√®me est dans l\'attachement initial des √©v√©nements');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du debug:', error);
    }
}

/**
 * Forcer le rechargement des √©v√©nements
 */
function forceReloadEvents() {
    console.log('\nüîÑ === RECHARGEMENT FORC√â DES √âV√âNEMENTS ===');
    
    try {
        // R√©attacher les √©v√©nements sur tous les conteneurs existants
        const containers = document.querySelectorAll('.search-results-container');
        
        containers.forEach((container, containerIndex) => {
            console.log(`üîó Rechargement conteneur ${containerIndex + 1}`);
            
            const items = container.querySelectorAll('.search-result-item');
            items.forEach((item, itemIndex) => {
                console.log(`   - Item ${itemIndex + 1}: ${item.dataset.productName}`);
                
                // Supprimer les anciens √©v√©nements (si possible)
                const newItem = item.cloneNode(true);
                item.parentNode.replaceChild(newItem, item);
                
                // Ajouter les nouveaux √©v√©nements
                newItem.addEventListener('click', function(e) {
                    console.log('üéØ NOUVEAU CLIC sur:', this.dataset.productName);
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Trouver l'input associ√©
                    const input = this.closest('.invoice-item-row')?.querySelector('.description-input');
                    if (input) {
                        selectProduct(this, input);
                    } else {
                        console.error('‚ùå Input non trouv√©');
                    }
                });
                
                // Style pour identifier les √©l√©ments recharg√©s
                newItem.style.borderLeft = '4px solid #4caf50';
            });
        });
        
        console.log('‚úÖ √âv√©nements recharg√©s');
        console.log('üí° Les √©l√©ments avec bordure verte ont des √©v√©nements frais');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du rechargement:', error);
    }
}

/**
 * Test simple de s√©lection
 */
function testSimpleSelection() {
    console.log('\nüöÄ === TEST SIMPLE ===');
    
    const input = document.querySelector('.description-input');
    if (!input) {
        console.error('‚ùå Aucun champ trouv√©');
        return;
    }
    
    // Cr√©er un faux item de test
    const fakeItem = {
        dataset: {
            productName: 'Produit Test',
            productPrice: '99.99',
            productUnit: 'retail'
        }
    };
    
    console.log('üß™ Test avec produit fictif...');
    selectProduct(fakeItem, input);
    
    console.log('üìù R√©sultat:', input.value);
}

// Exporter les fonctions
window.debugProductSelection = debugProductSelection;
window.forceReloadEvents = forceReloadEvents;
window.testSimpleSelection = testSimpleSelection;

console.log('üõ†Ô∏è Fonctions de debug disponibles:');
console.log('- debugProductSelection() : Debug complet de la s√©lection');
console.log('- forceReloadEvents() : Recharger les √©v√©nements de clic');
console.log('- testSimpleSelection() : Test simple avec produit fictif');
console.log('\nüí° Commencez par: debugProductSelection()');
