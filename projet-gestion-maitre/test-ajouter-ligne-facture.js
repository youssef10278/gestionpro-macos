// test-ajouter-ligne-facture.js - Test du bouton "Ajouter une ligne"

console.log('‚ûï === TEST BOUTON AJOUTER UNE LIGNE ===');

/**
 * Test complet du bouton "Ajouter une ligne"
 */
async function testAddLineButton() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DE L\'ENVIRONNEMENT');
        
        // V√©rifier qu'on est sur la page factures
        if (!window.location.href.includes('invoices.html')) {
            console.error('‚ùå Ce test doit √™tre ex√©cut√© sur la page des factures');
            return;
        }
        
        // V√©rifier qu'on est en mode √©dition
        const editorView = document.getElementById('editorView');
        if (!editorView || editorView.classList.contains('hidden')) {
            console.error('‚ùå Aucune facture en cours d\'√©dition. Cr√©ez une nouvelle facture d\'abord.');
            return;
        }
        
        console.log('‚úÖ Environnement OK - Facture en cours d\'√©dition');
        
        console.log('\n2Ô∏è‚É£ V√âRIFICATION DU BOUTON');
        
        const addBtn = document.getElementById('addItemBtn');
        if (!addBtn) {
            console.error('‚ùå Bouton "Ajouter une ligne" non trouv√©');
            return;
        }
        
        console.log('‚úÖ Bouton trouv√©:', addBtn.textContent.trim());
        console.log('üìä Classes CSS:', addBtn.className);
        console.log('üîó √âv√©nements attach√©s:', addBtn.onclick ? 'onclick pr√©sent' : 'Pas d\'onclick');
        
        // V√©rifier les √©v√©nements avec getEventListeners si disponible
        if (typeof getEventListeners === 'function') {
            const listeners = getEventListeners(addBtn);
            console.log('üéß Event listeners:', listeners);
        }
        
        console.log('\n3Ô∏è‚É£ √âTAT INITIAL DU TABLEAU');
        
        const tbody = document.getElementById('invoiceItemsTable');
        if (!tbody) {
            console.error('‚ùå Tableau des articles non trouv√©');
            return;
        }
        
        const initialRows = tbody.querySelectorAll('.invoice-item-row');
        console.log('üìä Nombre de lignes initial:', initialRows.length);
        
        initialRows.forEach((row, index) => {
            const desc = row.querySelector('.description-input')?.value || '(vide)';
            console.log(`   Ligne ${index + 1}: ${desc}`);
        });
        
        console.log('\n4Ô∏è‚É£ TEST DE CLIC SUR LE BOUTON');
        
        console.log('üñ±Ô∏è Simulation du clic...');
        
        // Simuler le clic
        addBtn.click();
        
        // Attendre un peu pour que l'ajout se fasse
        await new Promise(resolve => setTimeout(resolve, 200));
        
        console.log('\n5Ô∏è‚É£ V√âRIFICATION APR√àS CLIC');
        
        const newRows = tbody.querySelectorAll('.invoice-item-row');
        console.log('üìä Nombre de lignes apr√®s clic:', newRows.length);
        
        if (newRows.length > initialRows.length) {
            console.log('‚úÖ SUCC√àS - Nouvelle ligne ajout√©e !');
            
            // Analyser la nouvelle ligne
            const lastRow = newRows[newRows.length - 1];
            const descInput = lastRow.querySelector('.description-input');
            const qtyInput = lastRow.querySelector('[name="quantity"]');
            const priceInput = lastRow.querySelector('[name="unit_price"]');
            
            console.log('üìù Nouvelle ligne:');
            console.log(`   - Description: "${descInput?.value || '(vide)'}"`);
            console.log(`   - Quantit√©: ${qtyInput?.value || 'N/A'}`);
            console.log(`   - Prix: ${priceInput?.value || 'N/A'}`);
            console.log(`   - Focus sur description: ${document.activeElement === descInput ? '‚úÖ' : '‚ùå'}`);
            
            // Tester les √©v√©nements sur la nouvelle ligne
            console.log('\n6Ô∏è‚É£ TEST DES √âV√âNEMENTS SUR LA NOUVELLE LIGNE');
            
            if (qtyInput && priceInput) {
                console.log('üß™ Test de calcul automatique...');
                
                // Modifier la quantit√©
                qtyInput.value = '3';
                qtyInput.dispatchEvent(new Event('input', { bubbles: true }));
                
                // Modifier le prix
                priceInput.value = '25.50';
                priceInput.dispatchEvent(new Event('input', { bubbles: true }));
                
                await new Promise(resolve => setTimeout(resolve, 100));
                
                // V√©rifier le total de ligne
                const lineTotalElement = lastRow.querySelector('.line-total');
                const expectedTotal = (3 * 25.50).toFixed(2);
                const actualTotal = lineTotalElement?.textContent || '0';
                
                console.log(`   - Total attendu: ${expectedTotal}`);
                console.log(`   - Total calcul√©: ${actualTotal}`);
                console.log(`   - Calcul correct: ${actualTotal === expectedTotal ? '‚úÖ' : '‚ùå'}`);
            }
            
            // Tester le bouton supprimer
            const removeBtn = lastRow.querySelector('.remove-item-btn');
            if (removeBtn) {
                console.log('üóëÔ∏è Bouton supprimer trouv√© sur la nouvelle ligne');
            } else {
                console.log('‚ö†Ô∏è Bouton supprimer non trouv√©');
            }
            
        } else {
            console.error('‚ùå √âCHEC - Aucune nouvelle ligne ajout√©e');
            
            // Diagnostics suppl√©mentaires
            console.log('\nüîç DIAGNOSTICS:');
            console.log('- Fonction addNewInvoiceLine disponible:', typeof addNewInvoiceLine === 'function');
            console.log('- Fonction attachRowEvents disponible:', typeof attachRowEvents === 'function');
            console.log('- Fonction createRowHTML disponible:', typeof createRowHTML === 'function');
            
            // V√©rifier les erreurs dans la console
            console.log('üí° V√©rifiez la console pour d\'√©ventuelles erreurs JavaScript');
        }
        
        console.log('\n7Ô∏è‚É£ TEST MULTIPLE');
        
        console.log('üîÑ Test d\'ajout de plusieurs lignes...');
        
        for (let i = 0; i < 3; i++) {
            addBtn.click();
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        const finalRows = tbody.querySelectorAll('.invoice-item-row');
        console.log(`üìä Nombre final de lignes: ${finalRows.length}`);
        console.log(`‚úÖ ${finalRows.length - newRows.length} lignes suppl√©mentaires ajout√©es`);
        
        console.log('\nüéØ R√âSULTAT FINAL');
        console.log('‚úÖ Test termin√© - V√©rifiez les r√©sultats ci-dessus');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

/**
 * Test rapide du bouton
 */
function testQuickAdd() {
    console.log('\nüöÄ === TEST RAPIDE ===');
    
    const addBtn = document.getElementById('addItemBtn');
    if (!addBtn) {
        console.error('‚ùå Bouton non trouv√©');
        return;
    }
    
    const tbody = document.getElementById('invoiceItemsTable');
    if (!tbody) {
        console.error('‚ùå Tableau non trouv√©');
        return;
    }
    
    const beforeCount = tbody.querySelectorAll('.invoice-item-row').length;
    console.log(`üìä Lignes avant: ${beforeCount}`);
    
    addBtn.click();
    
    setTimeout(() => {
        const afterCount = tbody.querySelectorAll('.invoice-item-row').length;
        console.log(`üìä Lignes apr√®s: ${afterCount}`);
        console.log(`${afterCount > beforeCount ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
    }, 200);
}

/**
 * Forcer l'ajout d'une ligne manuellement
 */
function forceAddLine() {
    console.log('\nüîß === AJOUT MANUEL FORC√â ===');
    
    try {
        if (typeof addNewInvoiceLine === 'function') {
            console.log('üéØ Appel direct de addNewInvoiceLine()...');
            addNewInvoiceLine();
        } else {
            console.error('‚ùå Fonction addNewInvoiceLine non disponible');
            
            // Essayer d'ajouter manuellement
            console.log('üõ†Ô∏è Tentative d\'ajout manuel...');
            
            const tbody = document.getElementById('invoiceItemsTable');
            if (!tbody) {
                console.error('‚ùå Tableau non trouv√©');
                return;
            }
            
            const currentRows = tbody.querySelectorAll('.invoice-item-row');
            const newIndex = currentRows.length;
            
            // Cr√©er une ligne simple
            const newRow = document.createElement('tr');
            newRow.className = 'invoice-item-row';
            newRow.innerHTML = `
                <td class="p-4 text-center font-medium text-gray-900 dark:text-white">${newIndex + 1}</td>
                <td class="p-4">
                    <div class="relative">
                        <input type="text" class="description-input w-full p-2 border border-gray-300 rounded-lg" 
                               placeholder="Rechercher ou saisir un produit/service..." value="">
                        <div class="search-results-container hidden"></div>
                    </div>
                </td>
                <td class="p-4">
                    <input type="number" name="quantity" value="1" min="1" 
                           class="w-20 p-2 border border-gray-300 rounded-lg text-center">
                </td>
                <td class="p-4 text-center">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        üè™ Pi√®ce
                    </span>
                </td>
                <td class="p-4">
                    <input type="number" name="unit_price" value="0" min="0" step="0.01" 
                           class="w-full p-2 border border-gray-300 rounded-lg text-right">
                </td>
                <td class="p-4">
                    <span class="line-total font-bold text-lg">0.00</span>
                    <span class="text-gray-500 text-sm ml-1">DH</span>
                </td>
                <td class="p-4 text-center">
                    <button type="button" class="remove-item-btn bg-red-100 hover:bg-red-200 text-red-600 rounded-full w-8 h-8">√ó</button>
                </td>
            `;
            
            tbody.appendChild(newRow);
            
            // Focus sur le champ description
            const descInput = newRow.querySelector('.description-input');
            if (descInput) {
                descInput.focus();
            }
            
            console.log('‚úÖ Ligne ajout√©e manuellement');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ajout manuel:', error);
    }
}

// Exporter les fonctions
window.testAddLineButton = testAddLineButton;
window.testQuickAdd = testQuickAdd;
window.forceAddLine = forceAddLine;

console.log('üõ†Ô∏è Fonctions de test disponibles:');
console.log('- testAddLineButton() : Test complet du bouton');
console.log('- testQuickAdd() : Test rapide');
console.log('- forceAddLine() : Forcer l\'ajout d\'une ligne');
console.log('\nüí° Commencez par: testAddLineButton()');
